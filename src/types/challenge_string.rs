// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

use crate::Constrained;

#[cfg_attr(feature = "serde", derive(serde::Deserialize, serde::Serialize))]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
/// A struct that holds a challenge string and its expiration time.
pub struct ChallengeString {
    /// The challenge, as generated by the polyproto home server.
    challenge: String,
    /// An expiry date in seconds since the Unix epoch, after which the challenge cannot be completed
    /// any longer.
    expires: u64,
}

impl ChallengeString {
    /// Creates a new `ChallengeString` with the given challenge and expiration time.
    /// Uses the `validate` method of the constraint system to ensure that the challenge string is well formed.
    pub fn new(challenge: String, expires: u64) -> Result<Self, crate::ConstraintError> {
        let challenge = Self { challenge, expires };
        challenge.validate(None)?;
        Ok(challenge)
    }

    pub fn challenge(&self) -> &str {
        &self.challenge
    }

    pub fn expires(&self) -> u64 {
        self.expires
    }
}
